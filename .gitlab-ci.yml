#image: python:3.10-alpine3.19
image: python:3.11.9-slim-bookworm

variables:  # Change pip's cache directory to be inside the project directory since we can only cache local items.
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip/"

stages:
    - build
    - test
    - package
    - deploy

# before_script:
    # - apk add --no-cache alpine-sdk g++ hdf5-dev llvm14-dev linux-headers
    # - apt-get update

build:
    stage: build
    script:
        - python3 -m pip install --upgrade pip
        - python3 -m venv .venv
        - source .venv/bin/activate
        # - LLVM_CONFIG=/usr/bin/llvm14-config pip install llvmlite
        - pip install -e .
    cache:
        key: "cache-$CI_COMMIT_REF_SLUG"
        paths:
            - .venv/
            - .cache/pip/
        policy: pull-push

# TODO: as soon as the COS cache on gitlab works, separate into three jobs running in parallel to the tests
lint:
    stage: test
    cache:
        key: "cache-$CI_COMMIT_REF_SLUG"
        paths:
            - .venv/
            - .cache/pip/
        policy: pull
    script:
        - source .venv/bin/activate
        - pip install ruff
        - return_code=0
        - ruff check --output-format grouped || return_code=$(($return_code + $?))
        - ruff check --exit-zero --output-format grouped --output-file ruff.txt
        - ruff check --exit-zero --output-format gitlab --output-file gl-code-quality-report.json
        - ruff format --check || return_code=$(($return_code + $?))
        - exit $return_code
    artifacts:
        reports:
            codequality: gl-code-quality-report.json
        paths:
            - ruff.txt
        when: always

    allow_failure: true


tests:
    stage: test
    cache:
        key: "cache-$CI_COMMIT_REF_SLUG"
        paths:
            - .venv/
            - .cache/pip/
        policy: pull
    script:
        - source .venv/bin/activate
        - pip install coverage pytest pytest-cov
        - pytest test --junitxml=.testreports/report.xml --cov=pyRadPlan --cov-report term --cov-report xml:.testreports/coverage.xml --cov-report html:.testreports/html
    artifacts:
        when: always
        reports:
          coverage_report:
            coverage_format: cobertura
            path: .testreports/coverage.xml
          junit: .testreports/report.xml
        paths:
            - .testreports/html
            - .testreports/coverage.xml
            - .testreports/report.xml
    coverage: '/TOTAL.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'

packaging:
    stage: package
    variables:
        TWINE_USERNAME: gitlab-ci-token
        TWINE_PASSWORD: $CI_JOB_TOKEN
    cache:
        key: "cache-$CI_COMMIT_REF_SLUG"
        paths:
            - .venv/
            - .cache/pip/
        policy: pull
    script:
        - source .venv/bin/activate
        - pip install --upgrade build
        - python -m build
    artifacts:
        paths:
            - dist/
        expire_in: 1 week

docs:
    stage: package
    cache:
        key: "cache-$CI_COMMIT_REF_SLUG"
        paths:
            - .venv/
            - .cache/pip/
        policy: pull
    script:
        - source .venv/bin/activate
        - pip install sphinx
        - pip install sphinx-autodoc-typehints
        - pip install autodoc_pydantic
        - pip install sphinx-design
        - pip install pydata-sphinx-theme
        - pip install numpydoc
        - sphinx-build docs .doc
    artifacts:
        when: always
        paths:
            - .doc

deploy-tag-internal:
    stage: deploy
    variables:
        TWINE_USERNAME: gitlab-ci-token
        TWINE_PASSWORD: $CI_JOB_TOKEN
    cache:
        key: "cache-$CI_COMMIT_REF_SLUG"
        paths:
            - .venv/
            - .cache/pip/
        policy: pull
    rules:
        - if: '$CI_COMMIT_TAG =~ /^v\d+.\d+.\d+$/'
    script:
        - source .venv/bin/activate
        - pip install --upgrade twine
        - python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
    dependencies:
        - packaging

deploy-tag-pypi:
    stage: deploy
    variables:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: $PYPI_TOKEN
    cache:
        key: "cache-$CI_COMMIT_REF_SLUG"
        paths:
            - .venv/
            - .cache/pip/
        policy: pull
    rules:
        - if: '$CI_COMMIT_TAG =~ /^v\d+.\d+.\d+$/'
    script:
        - source .venv/bin/activate
        - pip install --upgrade twine
        - python -m twine upload dist/*
    dependencies:
        - packaging

pages-internal:
    stage: deploy
    dependencies:
        - tests
        - docs
    script:
        - mv .doc public/

    artifacts:
        paths:
            - public
    rules:
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
